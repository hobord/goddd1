// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/hobord/goddd1/domain"
	mock "github.com/stretchr/testify/mock"
)

// EntityRepository is an autogenerated mock type for the EntityRepository type
type EntityRepository struct {
	mock.Mock
}

// Delete provides a mock function with given fields: ctx, id
func (_m *EntityRepository) Delete(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: ctx, id
func (_m *EntityRepository) GetByID(ctx context.Context, id string) (*domain.Entity, error) {
	ret := _m.Called(ctx, id)

	var r0 *domain.Entity
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.Entity); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Entity)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields: ctx
func (_m *EntityRepository) GetAll(ctx context.Context) ([]*domain.Entity, error) {
	ret := _m.Called(ctx)

	var r0 []*domain.Entity
	if rf, ok := ret.Get(0).(func(context.Context) []*domain.Entity); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Entity)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: ctx, entity
func (_m *EntityRepository) Save(ctx context.Context, entity *domain.Entity) error {
	ret := _m.Called(ctx, entity)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Entity) error); ok {
		r0 = rf(ctx, entity)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
